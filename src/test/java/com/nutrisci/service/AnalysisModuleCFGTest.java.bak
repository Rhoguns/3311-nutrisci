package com.nutrisci.service;

import com.nutrisci.dao.MealDAO;
import com.nutrisci.dao.NutritionDAO;
import com.nutrisci.dao.AppliedSwapDAO;
import com.nutrisci.dao.DAOFactory;
import com.nutrisci.model.Meal;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class AnalysisModuleCFGTest {
    
    @Mock private NutritionDAO mockNutritionDAO;
    @Mock private MealDAO mockMealDAO;
    @Mock private AppliedSwapDAO mockAppliedSwapDAO;
    
    private AnalysisModule analysisModule;

    @BeforeEach
    void setUp() {
        try (MockedStatic<DAOFactory> daoFactory = mockStatic(DAOFactory.class)) {
            daoFactory.when(DAOFactory::getMealDAO).thenReturn(mockMealDAO);
            daoFactory.when(DAOFactory::getAppliedSwapDAO).thenReturn(mockAppliedSwapDAO);
            
            analysisModule = new AnalysisModule(mockNutritionDAO);
        }
    }

    @Test
    void testTC12_CFGAdherenceCalculation() throws Exception {
        // TC12: CFG adherence calculation
        
        // Initial Condition: User has logged meal with vegetables and grains
        LocalDate testDate = LocalDate.now();
        
        Meal testMeal = new Meal("Lunch", LocalDateTime.now());
        testMeal.setProfileId(1);
        // Fix: Use getIngredients().put() instead of addIngredient()
        testMeal.getIngredients().put("broccoli", 100.0);  // Vegetables
        testMeal.getIngredients().put("rice", 150.0);      // Grains
        testMeal.getIngredients().put("chicken", 100.0);   // Meat
        testMeal.getIngredients().put("milk", 200.0);      // Dairy
        
        // Mock food group classifications for CFG compliance
        when(mockNutritionDAO.getFoodGroup("broccoli")).thenReturn("Vegetables and Fruits");
        when(mockNutritionDAO.getFoodGroup("rice")).thenReturn("Grain Products");
        when(mockNutritionDAO.getFoodGroup("chicken")).thenReturn("Meat and Alternatives");
        when(mockNutritionDAO.getFoodGroup("milk")).thenReturn("Milk and Alternatives");
        
        List<Meal> meals = Arrays.asList(testMeal);
        when(mockMealDAO.findByProfileAndDateRange(eq(1), eq(testDate), eq(testDate)))
            .thenReturn(meals);
        
        // Procedure: Compare to CFG
        Map<String, Double> cfgCompliance = analysisModule.computeCfgCompliance(1, testDate);
        
        // Expected Outcome: Percentages for each food group
        assertNotNull(cfgCompliance, "CFG compliance map should not be null");
        assertTrue(cfgCompliance.containsKey("Vegetables and Fruits"), "Should contain vegetables category");
        assertTrue(cfgCompliance.containsKey("Grain Products"), "Should contain grains category");
        assertTrue(cfgCompliance.containsKey("Milk and Alternatives"), "Should contain dairy category");
        assertTrue(cfgCompliance.containsKey("Meat and Alternatives"), "Should contain meat category");
        
        // Verify percentages are reasonable (total = 550g)
        // Vegetables: 100g/550g = ~18.2%
        // Grains: 150g/550g = ~27.3%
        // Meat: 100g/550g = ~18.2%
        // Dairy: 200g/550g = ~36.4%
        
        double vegetablesPercent = cfgCompliance.get("Vegetables and Fruits");
        double grainsPercent = cfgCompliance.get("Grain Products");
        double meatPercent = cfgCompliance.get("Meat and Alternatives");
        double dairyPercent = cfgCompliance.get("Milk and Alternatives");
        
        // Test specific expectations from TC12
        assertTrue(vegetablesPercent > 15.0 && vegetablesPercent < 25.0, 
                  "Vegetables should be ~18% of total intake");
        assertTrue(grainsPercent > 25.0 && grainsPercent < 30.0, 
                  "Grains should be ~27% of total intake");
        assertTrue(meatPercent > 15.0 && meatPercent < 25.0, 
                  "Meat should be ~18% of total intake");
        assertTrue(dairyPercent > 30.0 && dairyPercent < 40.0, 
                  "Dairy should be ~36% of total intake");
        
        // Verify percentages add up to 100% (within tolerance)
        double totalPercentage = cfgCompliance.values().stream()
            .mapToDouble(Double::doubleValue).sum();
        assertEquals(100.0, totalPercentage, 1.0, "CFG percentages should sum to 100%");
        
        System.out.println("CFG Compliance Results:");
        cfgCompliance.forEach((group, percentage) -> 
            System.out.printf("  %s: %.1f%%\n", group, percentage));
    }

    @Test
    void testTC12_CFGAdherenceCalculation_EmptyMeals() throws Exception {
        // Test edge case: no meals logged
        LocalDate testDate = LocalDate.now();
        
        when(mockMealDAO.findByProfileAndDateRange(eq(1), eq(testDate), eq(testDate)))
            .thenReturn(Arrays.asList()); // Empty list
        
        Map<String, Double> cfgCompliance = analysisModule.computeCfgCompliance(1, testDate);
        
        // Should return empty map or all zeros
        assertNotNull(cfgCompliance, "CFG compliance should handle empty meals gracefully");
    }

    @Test
    void testTC12_CFGAdherenceCalculation_SingleFoodGroup() throws Exception {
        // Test with meal containing only one food group
        LocalDate testDate = LocalDate.now();
        
        Meal vegetableOnlyMeal = new Meal("Lunch", LocalDateTime.now());
        vegetableOnlyMeal.setProfileId(1);
        vegetableOnlyMeal.getIngredients().put("broccoli", 200.0);
        vegetableOnlyMeal.getIngredients().put("carrots", 150.0);
        
        when(mockNutritionDAO.getFoodGroup("broccoli")).thenReturn("Vegetables and Fruits");
        when(mockNutritionDAO.getFoodGroup("carrots")).thenReturn("Vegetables and Fruits");
        
        List<Meal> meals = Arrays.asList(vegetableOnlyMeal);
        when(mockMealDAO.findByProfileAndDateRange(eq(1), eq(testDate), eq(testDate)))
            .thenReturn(meals);
        
        Map<String, Double> cfgCompliance = analysisModule.computeCfgCompliance(1, testDate);
        
        // Should show 100% vegetables, 0% for other groups
        assertNotNull(cfgCompliance);
        if (cfgCompliance.containsKey("Vegetables and Fruits")) {
            assertTrue(cfgCompliance.get("Vegetables and Fruits") >= 95.0, 
                      "Should be nearly 100% vegetables");
        }
    }
}