package com.nutrisci.ui;

import com.nutrisci.dao.DAOFactory;
import com.nutrisci.dao.MealDAO;
import com.nutrisci.dao.NutritionDAO;
import com.nutrisci.model.Meal;
import com.nutrisci.service.AnalysisModule;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.MockedStatic;
import org.mockito.junit.jupiter.MockitoExtension;

import javax.swing.*;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class MealLoggerUITest {
    
    @Mock private MealDAO mockMealDAO;
    @Mock private NutritionDAO mockNutritionDAO;
    @Mock private AnalysisModule mockAnalysisModule;
    
    private MealLoggerUI mealLoggerUI;
    private JTextField tfProfileId, tfLoggedAt;
    private JComboBox<String> cbMealType;
    private JTextArea taIngredients;
    private JButton btnSave;

    @BeforeEach
    void setUp() throws Exception {
        try (MockedStatic<DAOFactory> daoFactory = mockStatic(DAOFactory.class)) {
            daoFactory.when(DAOFactory::getMealDAO).thenReturn(mockMealDAO);
            daoFactory.when(DAOFactory::getNutritionDAO).thenReturn(mockNutritionDAO);
            
            // FIX: Pass the mock DAO to the constructor as required
            mealLoggerUI = new MealLoggerUI(mockMealDAO);
            setField(mealLoggerUI, "analysis", mockAnalysisModule);
        }
        
        // Get the actual field names from MealLoggerUI
        tfProfileId = getField(mealLoggerUI, "tfProfileId");
        cbMealType = getField(mealLoggerUI, "cbMealType");
        tfLoggedAt = getField(mealLoggerUI, "tfLoggedAt");
        taIngredients = getField(mealLoggerUI, "taIngredients");
        btnSave = getField(mealLoggerUI, "btnSave");
    }

    @Test
    void testTC04_MealLogging_ValidMeal() throws Exception {
        // TC04: Normal meal logging
        
        // Mock nutrition data
        when(mockNutritionDAO.getCaloriesPerGram("Egg")).thenReturn(1.55);
        when(mockNutritionDAO.getCaloriesPerGram("Bread")).thenReturn(2.5);
        when(mockAnalysisModule.computeTotalCalories(any(Map.class))).thenReturn(280.0);
        
        // Initial Condition: TestUser profile active, CNF database stubbed
        tfProfileId.setText("1");
        cbMealType.setSelectedItem("Lunch");
        tfLoggedAt.setText("2025-07-19 12:30"); // Valid datetime format
        taIngredients.setText("Egg:100\nBread:50"); // Fixed format (no spaces after colon)
        
        // Procedure: Save meal
        btnSave.doClick();
        
        // Expected Outcome: Meal stored, calories = 280 kcal
        verify(mockMealDAO).insert(argThat(meal -> {
            return meal.getProfileId() == 1 && 
                   meal.getType().equals("Lunch") &&
                   meal.getIngredients().containsKey("Egg") &&
                   meal.getIngredients().get("Egg").equals(100.0) &&
                   meal.getIngredients().containsKey("Bread") &&
                   meal.getIngredients().get("Bread").equals(50.0);
        }));
        
        verify(mockAnalysisModule).computeTotalCalories(argThat(ingredients -> {
            return ingredients.get("Egg").equals(100.0) && 
                   ingredients.get("Bread").equals(50.0);
        }));
    }

    @Test
    void testTC05_MealLogging_MissingProfileId() throws Exception {
        // TC05: Missing required data
        
        // Initial Condition: Application running
        // Procedure: Leave profile ID blank
        tfProfileId.setText(""); // Blank profile ID
        cbMealType.setSelectedItem("Dinner");
        tfLoggedAt.setText("2025-07-19 18:00");
        taIngredients.setText("Tomato:50");
        
        // Click Save
        btnSave.doClick();
        
        // Expected Outcome: Error message, meal not stored
        verify(mockMealDAO, never()).insert(any(Meal.class));
    }

    @Test
    void testTC06_MealLogging_UnknownFood() throws Exception {
        // TC06: Unknown food ingredient - This test may not be directly applicable
        // since MealLoggerUI doesn't validate ingredients against NutritionDAO during input
        // but we can test the behavior anyway
        
        // Initial Condition: TestUser profile active
        tfProfileId.setText("1");
        cbMealType.setSelectedItem("Snack");
        tfLoggedAt.setText("2025-07-19 15:00");
        taIngredients.setText("Dragonfruit:50");
        
        // Procedure: Save meal with unknown food
        btnSave.doClick();
        
        // Expected Outcome: Meal should be saved (MealLoggerUI doesn't validate ingredients)
        // The validation happens later when calories are calculated
        verify(mockMealDAO).insert(any(Meal.class));
    }

    @Test
    void testTC06_MealLogging_InvalidIngredientFormat() throws Exception {
        // TC06 Alternative: Test invalid ingredient format
        
        // Initial Condition: TestUser profile active
        tfProfileId.setText("1");
        cbMealType.setSelectedItem("Snack");
        tfLoggedAt.setText("2025-07-19 15:00");
        taIngredients.setText("InvalidFormat 50"); // Missing colon
        
        // Procedure: Save meal with invalid format
        btnSave.doClick();
        
        // Expected Outcome: Error message, meal not saved due to format validation
        verify(mockMealDAO, never()).insert(any(Meal.class));
    }

    @SuppressWarnings("unchecked")
    private <T> T getField(Object obj, String fieldName) throws Exception {
        var field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        return (T) field.get(obj);
    }

    private void setField(Object obj, String fieldName, Object value) throws Exception {
        var field = obj.getClass().getDeclaredField(fieldName);
        field.setAccessible(true);
        field.set(obj, value);
    }
}